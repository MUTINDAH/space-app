import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.firebase.crashlytics'
    id 'dagger.hilt.android.plugin'
}

android {
    signingConfigs {
        config {
            final def keystorePath = System.getenv("SPACE_APP_KEYSTORE_PATH")
            if (keystorePath != null && !keystorePath.isEmpty()) {
                final def keystoreFile = file(keystorePath)
                if (keystoreFile.exists()) {
                    storeFile keystoreFile
                    storePassword System.getenv("SPACE_APP_KEYSTORE_PASSWORD")
                    keyAlias "StarlinerKey"
                    keyPassword System.getenv("SPACE_APP_KEY_PASSWORD")
                } else {
                    println "couldn't find keystore file: " + keystoreFile.path
                }
            } else {
                println "keystore keystorePath does not exist"
            }
        }
    }

    compileSdkVersion buildConfig.compileSdk
    defaultConfig {
        applicationId "sk.kasper.space"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode 21
        versionName "2.0.0"
        testInstrumentationRunner "sk.kasper.space.CustomAndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            manifestPlaceholders += [usesCleartextTraffic: "false"]
        }
        debug {
            manifestPlaceholders += [usesCleartextTraffic: "true"]
        }
    }
    compileOptions {
        sourceCompatibility buildConfig.javaVersion
        targetCompatibility buildConfig.javaVersion

        kotlinOptions {
            freeCompilerArgs += [
                '-Xopt-in=kotlin.RequiresOptIn',
            ]
        }
    }
    kotlinOptions {
        jvmTarget = buildConfig.jvmTarget
        useIR = true
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        devices {
            pixel2 (ManagedVirtualDevice) {
                device = "Pixel 2"
                apiLevel = 30
                systemImageSource = "aosp-atd"
                abi = "x86"
            }
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation project(':ui-common')
    implementation project(':ui-settings')
    implementation project(':ui-timeline')
    implementation project(':ui-playground')
    implementation project(':ui-launch')
    implementation project(':database-android')
    implementation project(':base-android')
    implementation project(':work')
    androidTestImplementation project(':remote')

    implementation libs.androidx.appcompat
    implementation libs.androidx.core

    implementation libs.androidx.navigation.ui
    implementation libs.androidx.navigation.compose

    implementation libs.androidx.compose.foundation
    implementation libs.androidx.compose.ui.tooling
    implementation libs.androidx.compose.ui.ui
    implementation libs.androidx.compose.material.material
    implementation libs.androidx.activity.compose

    implementation libs.dagger.hilt.android
    kapt libs.dagger.hilt.compiler
    kaptAndroidTest libs.dagger.hilt.compiler
    androidTestImplementation libs.dagger.hilt.testing

    implementation libs.threetenabp.threetenabp
    testImplementation libs.threetenabp.test

    androidTestImplementation libs.androidx.compose.ui.test.junit4
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.runner

    androidTestUtil libs.androidx.test.orchestrator
    testImplementation libs.androidx.coretesting
    testImplementation libs.junit
    testImplementation libs.mockito.kotlin
}
